#pragma once
#include "base.hpp"

using WEIGHT_MAP = const std::array<std::array<int, 10>, 9>;

// 权重表所记录的数值都是红方位置 -> 分数，黑方评分则需要倒置这张表，我的习惯是红在上，横放

WEIGHT_MAP WEIGHT_KING{
    {
        {0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0},
        {10033,10006,10003,0,0,0,0,0,0,0},
        {10045,10006,10003,0,0,0,0,0,0,0},
        {10033,10006,10003,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0},
    } };

WEIGHT_MAP WEIGHT_GUARD{
    {
        {0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0},
        {60,0,60,0,0,0,0,0,0,0},
        {0,69,0,0,0,0,0,0,0,0},
        {60,0,60,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0},
    } };

WEIGHT_MAP WEIGHT_BISHOP{
    {
        {0,0,54,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0},
        {60,0,0,0,60,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0},
        {0,0,69,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0},
        {60,0,0,0,60,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0},
        {0,0,54,0,0,0,0,0,0,0},
    } };

WEIGHT_MAP WEIGHT_KNIGHT{
    {
        {264,255,270,276,270,270,279,276,270,270},
        {255,270,276,282,294,300,324,294,288,270},
        {270,276,282,294,303,297,300,297,309,270},
        {264,279,285,285,306,309,321,309,291,288},
        {270,234,276,294,309,312,300,297,282,270},
        {264,279,285,285,306,309,321,309,291,288},
        {270,276,282,294,303,297,300,297,309,270},
        {255,270,276,282,294,300,324,294,288,270},
        {264,255,270,276,270,270,279,276,270,270},
    } };

WEIGHT_MAP WEIGHT_ROOK{
    {
        {582,600,594,612,624,624,618,618,618,618},
        {618,624,624,627,636,633,639,624,636,624},
        {612,618,612,612,636,633,639,621,627,621},
        {636,636,636,636,642,642,648,642,648,639},
        {600,600,636,642,645,645,648,648,699,642},
        {636,636,636,636,642,642,648,642,648,639},
        {612,618,612,612,636,633,639,621,627,621},
        {618,624,624,627,636,633,639,624,636,624},
        {582,600,594,612,624,624,618,618,618,618},
    } };

WEIGHT_MAP WEIGHT_CANNON{
    {
        {288,288,291,288,285,288,288,291,294,300},
        {288,291,288,288,288,288,297,291,294,300},
        {291,294,300,288,297,288,297,288,288,288},
        {297,294,297,288,288,288,294,273,276,273},
        {297,294,303,288,300,300,300,276,267,270},
        {297,294,297,288,288,288,294,273,276,273},
        {291,294,300,288,297,288,297,288,288,288},
        {288,291,288,288,288,288,297,291,294,300},
        {288,288,291,288,285,288,288,291,294,300},
    } };

WEIGHT_MAP WEIGHT_PAWN{
    {
        {0,0,0,21,21,42,57,57,57,27},
        {0,0,0,0,0,54,69,72,72,27},
        {0,0,0,21,39,60,81,96,102,27},
        {0,0,0,0,0,81,87,111,126,33},
        {0,0,0,45,48,87,90,111,132,39},
        {0,0,0,0,0,81,87,111,126,33},
        {0,0,0,21,39,60,81,96,102,27},
        {0,0,0,0,0,54,69,72,72,27},
        {0,0,0,21,21,42,57,57,57,27},
    } };

std::map<PIECEID, WEIGHT_MAP> pieceWeights{
    {R_KING, WEIGHT_KING},
    {R_GUARD, WEIGHT_GUARD},
    {R_BISHOP, WEIGHT_BISHOP},
    {R_KNIGHT, WEIGHT_KNIGHT},
    {R_ROOK, WEIGHT_ROOK},
    {R_CANNON, WEIGHT_CANNON},
    {R_PAWN, WEIGHT_PAWN},
    {B_KING, WEIGHT_KING},
    {B_GUARD, WEIGHT_GUARD},
    {B_BISHOP, WEIGHT_BISHOP},
    {B_KNIGHT, WEIGHT_KNIGHT},
    {B_ROOK, WEIGHT_ROOK},
    {B_CANNON, WEIGHT_CANNON},
    {B_PAWN, WEIGHT_PAWN} };